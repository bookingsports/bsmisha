class Tennis.Views.MapView extends Backbone.View
  initialize: ->
    @handler = Gmaps.build('Google', builders: { Marker: CustomMarkerBuilder })
    @geocoder = new google.maps.Geocoder()
    @listenTo(@collection, 'change', @renderMarkers) if @collection
    @externalDomListeners()

  externalDomListeners: ->
    $ =>
      $('a[data-toggle="tab"]').on 'shown.bs.tab', (e) =>
        google.maps.event.trigger(@handler.getMap(), 'resize')

      $('.location-detector').click (e) =>
        $('.location-detector').addClass('fa-spin')
        if navigator.geolocation
          navigator.geolocation.getCurrentPosition(@putMeToMap)
      if $('#searcher').length
        input = $('#searcher #place')[0]
        options =
          bounds: @moscowBounds()
          type: ['geocode']

        @autocomplete = new google.maps.places.Autocomplete(input, options)

        $('#searcher').on 'ajax:success', (e, data) =>
          @renderMarkers(new Tennis.Collections.MarkerCollection(data.markers))
            $('.stadiums').html(data.stadiums) if data.stadiums

  putMeToMap: (pos) =>
    latLng = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude)
    @handler.getMap().panTo(latLng)
    @geolocationMarker = new google.maps.Marker
      position: latLng
      map: @handler.getMap()

    @geocoder.geocode latLng: latLng, (results, status) ->
      if status == google.maps.GeocoderStatus.OK
        if results[1]
          arrAddress = results

          $.each arrAddress, (i, address_component) ->
            if address_component.types[0] == 'locality'
              itemLocality = address_component.address_components[0].long_name
              $('#searcher #place').val(itemLocality)
        else
          alert 'Адрес не найден'

    $('.location-detector').removeClass('fa-spin')

  moscowCoords: ->
    lat: 55.75
    lng: 37.61

  moscowBounds: ->
    new google.maps.LatLngBounds(
      new google.maps.LatLng(56.06, 36.86),
      new google.maps.LatLng(55.53, 38.09)
    )

  coords: -> @moscowCoords()

  render: ->
    @handler.buildMap provider: {scrollwheel: false}, internal: {id: 'map'}, =>
      @renderMarkers(@collection)

    @afterMap() if @afterMap

  renderMarkers: (collection) ->
    @handler.removeMarkers(@markers)
    @markers = @handler.addMarkers collection.models
    @handler.bounds.extendWith(@markers)

    if $('#searcher #place').val() && @autocomplete.getPlace()
      map.handler.getMap().panTo(map.autocomplete.getPlace().geometry.location)
    else
      if @markers.length == 0
        @handler.getMap().setCenter(@moscowCoords())
      else if @markers.length == 1
        @handler.getMap().panTo(@markers[0].serviceObject.position)
        @handler.getMap().setZoom(14)
      else
        @handler.fitMapToBounds()
